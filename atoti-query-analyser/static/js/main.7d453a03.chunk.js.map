{"version":3,"sources":["Components/Input/Input.js","types/index.js","helpers/graphHelpers.js","Components/Graph/Link.js","Components/Details/Details.js","Components/Graph/Node.js","Components/Graph/Menu.js","helpers/iterators.js","helpers/selection.js","helpers/fillTimingInfo.js","helpers/criticalPath.js","helpers/cluster.js","helpers/jsonToD3Data.js","Components/Graph/Graph.js","helpers/labels.js","Components/Timeline/Timeline.js","Components/Summary/Summary.js","Components/NavBar/NavBar.js","helpers/v1tov2.js","helpers/server.js","Components/NavBar/GoBackToParentQueryButton.js","Components/NavBar/PassChooser.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","saveInput","event","setState","input","target","value","checkRadio","type","submitJson","passInput","state","submitV1","importFromServer","urlMode","submitQuery","prepareImport","credentials","btoa","username","password","url","query","saveToLocalStorage","window","localStorage","setItem","loadFromLocalStorage","getItem","location","URL","href","lastInput","devMode","search","includes","this","Form","className","Group","controlId","Control","as","rows","defaultValue","onChange","Col","md","lg","placeholder","key","Check","inline","label","checked","Button","variant","onClick","Component","shape","PropTypes","number","string","oneOf","arrayOf","bool","oneOfType","nodeType","id","isRequired","name","childrenIds","isSelected","radius","yFixed","status","outlineColor","source","retrId","measureProvider","measures","partitioning","d","length","nodeColors","Map","insideColor","get","details","enterLink","selection","attr","style","critical","updateLink","x","y","computeRadius","Math","max","sqrt","enterNode","select","r","updateNode","updateGraph","selectAll","call","Link","d3Link","d3","ReactDOM","findDOMNode","datum","link","Values","values","selected","map","v","i","vs","Details","startTime","elapsedTime","partition","startTimeElts","undefined","JSON","stringify","elapsedTimeElts","m","l","dimension","hierarchy","level","lev","path","Node","handle","nodeId","node","clickNode","myRef","React","createRef","d3Node","changeGraph","startTimes","elapsedTimes","popover","Popover","maxWidth","Title","aria-label","aria-hidden","Content","childId","nodeElem","createElement","ref","bind","Overlay","show","placement","current","Menu","searchMeasures","needle","trim","matchingMeasures","result","FuzzySearch","_","difference","selectedMeasures","caseSensitive","onSelectedMeasure","measure","size","listing","slice","renderMatchingMeasures","reduce","iterator","consumer","init","entry","next","done","invertDependencies","dep","invDep","temp","son","shift","push","has","forEach","parent","set","applySelection","queries","selections","selectedIds","retrievals","filter","retrieval","Object","entries","timingInfo","Set","removeNoOps","s","add","filterDependencies","dependencies","acc","keyStr","parseInt","filteredDeps","filterByMeasures","matching","intersection","predicate","visited","mDeps","downStack","iterators","deps","rId","mInvDeps","upStack","nodeDepths","invDependencies","depth","toDo","flat","currentDepth","almostDone","every","fillTimingInfo","data","graphInfo","info","starts","retr","setTimeToUnit","rs","findTime","elapsed","find","criticalPath","deep2nodes","maxTime","maxNode","nodes","maxParentCritical","parentNode","time","criticalLinks","nodeCluster","clust","cl","addClustersToNodes","clusters","todo","index","clust1","nodeDeps","clust2","delete","computeClusters","idx","ns","store","buildD3","depths","realStart","min","realElapsed","start","toString","clusterId","sort","a","b","getNodes","ids","links","filtered","retrIdxs","its","getLinks","parseJson","res","queryId","planInfo","clusterMemberId","passInfo","mdxPass","split","passNumber","parentId","passType","pass","underlyingDataNodes","findChildrenAndParents","Graph","prevState","selectedNodeId","toggleDrawer","showDrawer","selectMeasure","newSelection","selectedRetrievals","generateGraph","epoch","svgRef","restart","d3Graph","innerWidth","innerHeight","n","minC","maxC","viewCenter","clusterCenter","force","strength","distance","on","transform","dragStarted","dragging","dragEnded","active","alphaTarget","fx","fy","Nodes","Links","querySummary","typeLabels","placeRetrieval","lines","last","candidates","t","indexOf","end","computeLines","Row","row","onSelect","boxes","rowIdx","Error","some","w","width","height","Box","Rows","Timeline","selectBox","changed","findIndex","splice","closeBox","keyId","keyPartition","plan","Toast","onClose","Header","Body","newProps","timingLabels","Timings","globalTimings","timing","duration","getHumanDuration","MeasureList","changeFilter","cidx","times","ridx","Table","striped","bordered","hover","c","QuerySummary","summary","totalRetrievals","retrievalCountByType","count","partitioningCountByType","currentQuery","rootInfo","findRootInfo","rootId","rootQuery","underlyingQueries","inf","fullInfo","globalSummary","underlyingInfos","summaries","Reflect","computeGlobalSummary","allSummaries","pivots","Tabs","defaultActiveKey","pivot","Tab","eventKey","title","MultiPivotSummary","NavBar","navigate","goBackButton","passChooser","Navbar","bg","Brand","Nav","PIVOT_EXPR","PLAN_EXPR","RETRIEVAL_CLAUSES","match","line","_line","parents","properties","parseNewRetrieval","array","partitionId","partitions","property","parseProperty","pop","PROP_MAPPING","Continuous","Cache","TIME_PROP_MAPPING","mapping","exec","prop","pivotType","pivotId","retrieverType","rootFilter","contextValues","newProp","EXECUTION","matchClauses","expr","action","matchLine","parseDefault","lastLine","phase","parseV1","tickCallback","Promise","resolve","accumulator","root","currentLine","loop","to","from","test","parseLines","setTimeout","then","keys","dId","computeIfAbsent","dic","DIMENSION_EXPR","parseTimings","parse","findFilter","filters","e","computeFakeStart","setSimulatedTimeInfo","dependents","reverseDependencies","retrMap","queue","safeCount","console","log","did","incomplete","convertToV2","v1Structure","createDependencyList","queryFilters","it","Filter","createFilterMap","Location","part","member","substring","Measures","Partitioning","filterId","createRetrievalMap","flatMap","uniq","countBy","createSummary","serverCache","resolveQueryEndpoint","cached","resolution","reject","fetch","response","json","versions","pivotService","apis","restPath","err","error","queryServer","baseUrl","queryUrl","body","mdx","method","mode","cache","headers","Authorization","payload","goBackToParentQueryButton","currentParentId","callback","passLabel","passId","allQueries","currentPassId","allPassIds","activePass","p","dropName","NavDropdown","alignRight","Item","App","currentQueryId","router","restartGraph","changePass","newQueryId","Summary","dir","dataIsEmpty","goParentQueryButton","renderPassChooser","role","renderSummary","renderGraph","renderTimeline","Boolean","hostname","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d453a03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n    const location = new URL(window.location.href);\n\n    this.state = {\n      input: this.props.lastInput,\n      type: \"classic\",\n      urlMode: false,\n      username: \"\",\n      password: \"\",\n      url: \"\",\n      devMode: location.search.includes(\"dev\")\n    };\n  }\n\n  saveInput = event => {\n    this.setState({ input: event.target.value });\n  };\n\n  checkRadio = type => () => this.setState({ type });\n\n  submitJson = () => {\n    this.props.passInput(\"json\", this.state.type, this.state.input);\n  };\n\n  submitV1 = () => {\n    this.props.passInput(\"v1\", this.state.type, this.state.input);\n  };\n\n  importFromServer = () => {\n    if (this.state.urlMode) {\n      this.submitQuery();\n    } else {\n      this.prepareImport();\n    }\n  };\n\n  prepareImport = () => {\n    this.setState({ urlMode: true });\n  };\n\n  submitQuery = () => {\n    const credentials = btoa(`${this.state.username}:${this.state.password}`);\n    this.props.passInput(\"url\", this.state.type, {\n      url: this.state.url,\n      query: this.state.input,\n      credentials: `Basic ${credentials}`\n    });\n    this.setState({\n      type: \"default\"\n    });\n  };\n\n  saveToLocalStorage = () => {\n    window.localStorage.setItem(\"dev.input\", this.state.input);\n  };\n\n  loadFromLocalStorage = () => {\n    const input = window.localStorage.getItem(\"dev.input\");\n    this.setState({ input: input || \"\" });\n  };\n\n  render() {\n    const { input, urlMode, url, username, password, type } = this.state;\n\n    return (\n      <Form className=\"mx-4 my-4\">\n        <Form.Group controlId=\"query-input\">\n          <Form.Control\n            as=\"textarea\"\n            rows=\"10\"\n            defaultValue={input}\n            onChange={this.saveInput}\n          />\n        </Form.Group>\n        {urlMode ? (\n          <Row>\n            <Col md={6} lg={6}>\n              <Form.Control\n                placeholder=\"Server URL\"\n                defaultValue={url}\n                onChange={event => this.setState({ url: event.target.value })}\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                placeholder=\"Username\"\n                defaultValue={username}\n                onChange={event =>\n                  this.setState({ username: event.target.value })\n                }\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                placeholder=\"Password\"\n                type=\"password\"\n                defaultValue={password}\n                onChange={event =>\n                  this.setState({ password: event.target.value })\n                }\n              />\n            </Col>\n          </Row>\n        ) : null}\n\n        <div key=\"inline-radio\" className=\"mb-3\">\n          <Form.Check\n            inline\n            label=\"Classic\"\n            type=\"radio\"\n            onChange={this.checkRadio(\"classic\")}\n            checked={type === \"classic\"}\n          />\n          <Form.Check\n            inline\n            label=\"Developer\"\n            type=\"radio\"\n            onChange={this.checkRadio(\"dev\")}\n            checked={type === \"dev\"}\n          />\n        </div>\n\n        <Button variant=\"primary\" onClick={this.submitJson}>\n          Import from Json\n        </Button>\n        {\"  \"}\n        <Button variant=\"primary\" onClick={this.submitV1}>\n          Import from V1\n        </Button>\n        {\"  \"}\n        <Button\n          variant={urlMode === \"server\" ? \"primary\" : \"secondary\"}\n          onClick={this.importFromServer}\n        >\n          Import from server\n        </Button>\n        {this.state.devMode ? (\n          <Button variant=\"outline-info\" onClick={this.saveToLocalStorage}>\n            Into LS\n          </Button>\n        ) : null}\n        {this.state.devMode ? (\n          <Button variant=\"outline-info\" onClick={this.loadFromLocalStorage}>\n            From LS\n          </Button>\n        ) : null}\n      </Form>\n    );\n  }\n}\n\nInput.propTypes = {\n  passInput: PropTypes.func.isRequired,\n  lastInput: PropTypes.string.isRequired\n};\n\nexport default Input;\n","import PropTypes from \"prop-types\";\n\nconst { shape, number, string, oneOf, arrayOf, bool, oneOfType } = PropTypes;\n\nexport const nodeType = shape({\n  id: number.isRequired,\n  name: string.isRequired,\n  childrenIds: arrayOf(PropTypes.number).isRequired,\n  isSelected: bool.isRequired,\n  radius: number.isRequired,\n  yFixed: number.isRequired,\n  status: oneOf([null, \"root\", \"leaf\"])\n});\n\nexport const linkType = shape({\n  source: oneOfType([number, nodeType]).isRequired,\n  target: oneOfType([number, nodeType]).isRequired,\n  id: string.isRequired\n});\n\nexport const detailsType = shape({\n  type: string.isRequired,\n  retrId: number.isRequired,\n  measureProvider: string.isRequired,\n  measures: arrayOf(string).isRequired,\n  partitioning: string.isRequired\n});\n","/**\n * @param d: a D3 node\n * Return the color of the border of the node according to its state\n */\nconst outlineColor = d => {\n  if (d.isSelected) {\n    return \"#2E2E2E\";\n  }\n  if (d.childrenIds.length === 0) {\n    return \"#BFBFBF\";\n  }\n  // node has subqueries\n  return \"#E0281C\";\n};\n\n// Node color varies\n// yellow if node depends on no one\n// orange if is output\n// blue otherwise\n// Colors from https://observablehq.com/@d3/color-schemes\nconst nodeColors = new Map([\n  [\"DistributedAggregatesRetrieval\", \"#549ce8\"],\n  [\"DistributedPostProcessedRetrieval\", \"#f28e2c\"],\n  [\"JITPrimitiveAggregatesRetrieval\", \"#e15759\"],\n  [\"NoOpPrimitiveAggregatesRetrieval\", \"#76b7b2\"],\n  [\"PostProcessedAggregatesRetrieval\", \"#59a14f\"],\n  [\"PostProcessedResultsMerger\", \"#edc949\"],\n  [\"PrimitiveResultsMerger\", \"#af7aa1\"],\n  [\"RangeSharingPrimitiveAggregatesRetrieval\", \"#ff9da7\"],\n  [\"RangeSharingLinearPostProcessorAggregatesRetrieval\", \"#9c755f\"],\n  [\"RangeSharingLinearPostProcessorAggregatesRetrieval\", \"#bab0ab\"]\n]);\n\nconst insideColor = d => nodeColors.get(d.details.type) || \"grey\";\n\n// enter functions are called when node or link is created\n// update functions allows to modify node or links graphic characteritics\n// updateGraph is called when D3 clock ticks, and unpdate nodes and links\n\nconst enterLink = selection => {\n  selection\n    .attr(\"stroke-width\", 6)\n    .style(\"stroke\", d => (d.critical ? \"#b30000\" : \"#1B1978\"))\n    .style(\"opacity\", \".8\");\n};\n\nconst updateLink = selection => {\n  selection\n    .attr(\"x1\", d => d.source.x)\n    .attr(\"y1\", d => d.source.y)\n    .attr(\"x2\", d => d.target.x)\n    .attr(\"y2\", d => d.target.y);\n};\n\nconst computeRadius = d => Math.max(Math.sqrt(d.radius) * 4, 10);\n\nconst enterNode = selection => {\n  selection\n    .select(\"circle\")\n    .attr(\"r\", computeRadius)\n    .style(\"fill\", d => insideColor(d))\n    .style(\"stroke-width\", d => (d.isSelected ? 3 : 1))\n    .style(\"stroke\", d => outlineColor(d));\n  selection\n    .select(\"rect\")\n    .attr(\"width\", d => 2 * computeRadius(d))\n    .attr(\"height\", d => 2 * computeRadius(d))\n    .attr(\"rx\", \"3\")\n    .style(\"fill\", d => insideColor(d))\n    .style(\"stroke-width\", d => (d.isSelected ? 3 : 1))\n    .style(\"stroke\", d => outlineColor(d))\n    .style(\"transform\", d => {\n      const r = computeRadius(d);\n      return `translate(-${r}px, -${r}px)`;\n    });\n\n  selection\n    .select(\"text\")\n    .attr(\"dy\", \".35em\")\n    .attr(\"dx\", \"-0.65em\");\n};\n\nconst updateNode = selection => {\n  selection\n    .attr(\"transform\", d => `translate(${d.x},${d.y})`)\n    .select(\"circle\")\n    .style(\"stroke-width\", d => (d.isSelected ? 3 : 1))\n    .style(\"stroke\", d => outlineColor(d));\n\n  selection\n    .attr(\"transform\", d => `translate(${d.x},${d.y})`)\n    .select(\"rect\")\n    .style(\"stroke-width\", d => (d.isSelected ? 3 : 1))\n    .style(\"stroke\", d => outlineColor(d));\n};\n\nconst updateGraph = selection => {\n  selection.selectAll(\".node\").call(updateNode);\n  selection.selectAll(\".link\").call(updateLink);\n};\n\nexport { updateGraph, enterLink, updateLink, enterNode, updateNode };\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as d3 from \"d3\";\nimport { enterLink, updateLink } from \"../../helpers/graphHelpers\";\nimport { linkType } from \"../../types\";\n\nclass Link extends Component {\n  componentDidMount() {\n    this.d3Link = d3\n      .select(ReactDOM.findDOMNode(this))\n      .datum(this.props.link)\n      .call(enterLink);\n  }\n\n  componentDidUpdate() {\n    this.d3Link.datum(this.props.link).call(updateLink);\n  }\n\n  render() {\n    return <line className=\"link\" />;\n  }\n}\n\nLink.propTypes = {\n  link: linkType.isRequired\n};\n\nexport default Link;\n","import React from \"react\";\nimport \"./Details.css\";\n\nconst Values = ({ values, selected }) => {\n  return (\n    <>\n      [\n      {values.map((v, i, vs) => (\n        <span key={i}>\n          <span className={i === selected ? \"selected-partition\" : \"\"}>\n            {v}\n          </span>\n          {i < vs.length - 1 ? \",\" : \"\"}\n        </span>\n      ))}\n      ]\n    </>\n  );\n};\n\nconst Details = ({\n  startTime,\n  elapsedTime,\n  measures,\n  location,\n  partitioning,\n  partition\n}) => {\n  const startTimeElts =\n    partition === undefined ? (\n      JSON.stringify(startTime)\n    ) : (\n      <Values values={startTime} selected={partition} />\n    );\n  const elapsedTimeElts =\n    partition === undefined ? (\n      JSON.stringify(elapsedTime)\n    ) : (\n      <Values values={elapsedTime} selected={partition} />\n    );\n  return (\n    <ul>\n      <li>Start: {startTimeElts}</li>\n      <li>Elapsed: {elapsedTimeElts}</li>\n      <li>\n        Measures:\n        <ul>\n          {measures.map(m => (\n            <li key={m}>{m}</li>\n          ))}\n        </ul>\n      </li>\n      <li>\n        Location:\n        <ul>\n          {location.map(l => (\n            <li key={`${l.dimension}@${l.hierarchy}`}>\n              {l.dimension}@{l.hierarchy}\n              {l.level.map((lev, i) => {\n                return `:${lev}=${l.path[i]}`;\n              })}\n            </li>\n          ))}\n        </ul>\n      </li>\n      <li>Partitioning: {partitioning}</li>\n    </ul>\n  );\n};\n\nexport default Details;\nexport { Values };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport * as d3 from \"d3\";\nimport Popover from \"react-bootstrap/Popover\";\nimport Overlay from \"react-bootstrap/Overlay\";\nimport { nodeType } from \"../../types\";\nimport { enterNode, updateNode } from \"../../helpers/graphHelpers\";\nimport Details from \"../Details/Details\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.d3Node = d3\n      .select(ReactDOM.findDOMNode(this))\n      .datum(this.props.node)\n      .call(enterNode);\n  }\n\n  componentDidUpdate() {\n    this.d3Node\n      .call(updateNode)\n      .style(\"stroke-width\", this.props.node.isSelected ? 2 : 0);\n  }\n\n  handle = () => {\n    const {\n      node: { id: nodeId },\n      clickNode\n    } = this.props;\n    clickNode(nodeId);\n  };\n\n  render() {\n    const { node, changeGraph, clickNode } = this.props;\n    const { details, name, childrenIds, isSelected, status } = node;\n    const {\n      type,\n      startTimes,\n      elapsedTimes,\n      measures,\n      partitioning,\n      location\n    } = details;\n    const popover = (\n      <Popover style={{ maxWidth: \"800px\" }}>\n        <Popover.Title as=\"h3\">\n          {`${type} (#${name})`}\n          <button\n            type=\"button\"\n            className=\"close\"\n            aria-label=\"Close\"\n            onClick={() => clickNode(null)}\n            value=\"&times;\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </Popover.Title>\n        <Popover.Content>\n          <Details\n            startTime={startTimes}\n            elapsedTime={elapsedTimes}\n            measures={measures}\n            location={location}\n            partitioning={partitioning}\n          />\n          {childrenIds.map(childId => (\n            <>\n              <button\n                key={childId}\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => changeGraph(childId)}\n              >\n                Enter sub-query {childId}.\n              </button>{\" \"}\n            </>\n          ))}\n        </Popover.Content>\n      </Popover>\n    );\n\n    const nodeElem = status === \"leaf\" ? \"rect\" : \"circle\";\n    return (\n      <>\n        <g className=\"node\">\n          {React.createElement(nodeElem, {\n            ref: this.myRef,\n            onClick: this.handle.bind(this)\n          })}\n          <text onClick={this.handle}>{name}</text>\n        </g>\n        <Overlay show={isSelected} placement=\"auto\" target={this.myRef.current}>\n          {popover}\n        </Overlay>\n      </>\n    );\n  }\n}\n\nNode.propTypes = {\n  node: nodeType.isRequired,\n  clickNode: PropTypes.func.isRequired,\n  changeGraph: PropTypes.func.isRequired\n};\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport FuzzySearch from \"fuzzy-search\";\nimport _ from \"lodash\";\n\nimport \"./Menu.css\";\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      matchingMeasures: null\n    };\n  }\n\n  searchMeasures = event => {\n    const needle = event.target.value.trim();\n    if (needle === \"\") {\n      this.setState({ matchingMeasures: null });\n    } else {\n      const searcher = new FuzzySearch(\n        _.difference(this.props.measures, this.props.selectedMeasures),\n        undefined,\n        {\n          caseSensitive: false\n        }\n      );\n      const result = searcher.search(needle);\n      this.setState({ matchingMeasures: result });\n    }\n  };\n\n  renderMatchingMeasures() {\n    if (this.state.matchingMeasures === null) return null;\n\n    const { onSelectedMeasure } = this.props;\n    return (\n      <ul className=\"measures\">\n        {this.state.matchingMeasures.map(measure => (\n          <li key={measure}>\n            <Button\n              variant=\"outline-success\"\n              size=\"sm\"\n              onClick={() => onSelectedMeasure({ measure, selected: true })}\n            >\n              +\n            </Button>{\" \"}\n            {measure}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    const { measures, selectedMeasures, onSelectedMeasure } = this.props;\n    const listing =\n      selectedMeasures.length > 0\n        ? selectedMeasures.map(measure => (\n            <li key={measure}>\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={() => onSelectedMeasure({ measure, selected: false })}\n              >\n                -\n              </Button>{\" \"}\n              {measure}\n            </li>\n          ))\n        : [\n            ...measures.slice(0, 5).map(m => (\n              <li key={m} className=\"sample\">\n                {m}\n              </li>\n            )),\n            <li key=\"__sample__\" className=\"sample\">\n              ...\n            </li>\n          ];\n    return (\n      <div className=\"contextual-menu\">\n        <h5>Selected measures</h5>\n        <Form>\n          <Form.Group>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Search a measure\"\n              defaultValue=\"\"\n              onChange={this.searchMeasures}\n            />\n          </Form.Group>\n        </Form>\n        {this.renderMatchingMeasures()}\n        <ul className=\"measures\">{listing}</ul>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","const forEach = (iterator, consumer) => {\n  for (let entry = iterator.next(); !entry.done; entry = iterator.next()) {\n    const result = consumer(entry.value);\n    if (result !== undefined) {\n      return result;\n    }\n  }\n  return undefined;\n};\n\nconst reduce = (iterator, consumer, init) => {\n  let result = init;\n  for (let entry = iterator.next(); !entry.done; entry = iterator.next()) {\n    result = consumer(result, entry.value);\n  }\n  return result;\n};\n\nexport { forEach, reduce };\n","import _ from \"lodash\";\nimport * as iterators from \"./iterators\";\n\nconst invertDependencies = dep => {\n  const invDep = new Map();\n  if (dep.size === 0) {\n    return invDep;\n  }\n\n  const temp = [...dep.get(-1)];\n  const done = [];\n  while (temp.length !== 0) {\n    const son = temp.shift();\n    done.push(son);\n    if (dep.has(son)) {\n      dep.get(son).forEach(parent => {\n        if (!done.includes(parent) && !temp.includes(parent)) temp.push(parent);\n        try {\n          invDep.get(parent).push(son);\n        } catch {\n          invDep.set(parent, [son]);\n        }\n      });\n    } else {\n      try {\n        invDep.get(-1).push(son);\n      } catch {\n        invDep.set(-1, [son]);\n      }\n    }\n  }\n  return invDep;\n};\n\nconst removeNoOps = queries => {\n  return queries.map(query => {\n    const { retrievals: retrievalsToFilter } = query;\n\n    const selectedIds = retrievalsToFilter\n      .filter(retrieval => Object.entries(retrieval.timingInfo).length > 0)\n      .map(retrieval => retrieval.retrId);\n    return new Set(selectedIds);\n  });\n};\n\n// Remove nodes without timing info\nconst applySelection = (queries, type) => {\n  const selections = removeNoOps(queries);\n  selections.forEach(s => s.add(-1)); // Always add -1 to the selection\n  return selections;\n};\n\nconst filterDependencies = (dependencies, selection) => {\n  return Object.entries(dependencies).reduce((acc, [keyStr, values]) => {\n    const key = parseInt(keyStr, 10);\n    if (selection.has(key)) {\n      const filteredDeps = values.filter(v => selection.has(v));\n      if (filteredDeps.length > 0) {\n        acc.set(key, filteredDeps);\n      }\n    }\n    return acc;\n  }, new Map());\n};\n\nconst filterByMeasures = ({\n  retrievals,\n  dependencies,\n  measures,\n  selection\n}) => {\n  const predicate = r =>\n    selection.has(r.retrId) && _.intersection(measures, r.measures).length > 0;\n  const matching = retrievals.reduce(\n    (acc, r) => (predicate(r) ? acc.add(r.retrId) : acc),\n    new Set()\n  );\n\n  const visited = new Set(matching);\n  const mDeps = filterDependencies(dependencies, selection);\n  // Include all dependencies of the retrievals\n  const downStack = iterators.reduce(\n    matching.values(),\n    (acc, id) => {\n      const deps = mDeps.get(id);\n      if (deps) {\n        acc.push(...deps);\n      }\n      return acc;\n    },\n    []\n  );\n  while (downStack.length > 0) {\n    const rId = downStack.shift();\n    if (!visited.has(rId)) {\n      visited.add(rId);\n      const deps = mDeps.get(rId);\n      if (deps) {\n        downStack.push(...deps);\n      }\n    }\n  }\n\n  const mInvDeps = invertDependencies(mDeps);\n  // Include all parents of the retrievals\n  const upStack = iterators.reduce(\n    matching.values(),\n    (acc, id) => {\n      const deps = mInvDeps.get(id);\n      if (deps) {\n        acc.push(...deps);\n      }\n      return acc;\n    },\n    []\n  );\n  while (upStack.length > 0) {\n    const rId = upStack.shift();\n    if (!visited.has(rId)) {\n      visited.add(rId);\n      const deps = mInvDeps.get(rId);\n      if (deps) {\n        downStack.push(...deps);\n      }\n    }\n  }\n\n  // Always include the root -1 in the selection\n  visited.add(-1);\n  return visited;\n};\n\nexport {\n  applySelection,\n  filterDependencies,\n  filterByMeasures,\n  invertDependencies\n};\n","import { filterDependencies, invertDependencies } from \"./selection\";\n\nconst setTimeToUnit = (query, graphInfo) => {\n  return query.retrievals\n    .filter(r => graphInfo.selection.has(r.retrId))\n    .reduce((acc, retr) => {\n      acc.set(retr.retrId, 0);\n      return acc;\n    }, new Map());\n};\n\nconst nodeDepths = (query, selection) => {\n  if (selection.size === 0 || query.retrievals.length === 0) return [[]];\n\n  const dependencies = filterDependencies(query.dependencies, selection);\n  const invDependencies = invertDependencies(dependencies);\n  const depth = [[...invDependencies.get(-1)]];\n  const done = [...invDependencies.get(-1)];\n  let toDo = [\n    ...new Set(done.map(parent => invDependencies.get(parent)).flat(2))\n  ];\n  let currentDepth = 0;\n  while (toDo.length !== 0) {\n    currentDepth += 1;\n    depth[currentDepth] = [];\n    const almostDone = [];\n    for (let nodeId = 0; nodeId < toDo.length; nodeId += 1) {\n      const node = toDo[nodeId];\n      if (dependencies.get(node).every(parent => done.includes(parent))) {\n        depth[currentDepth].push(node);\n        almostDone.push(node);\n      }\n    }\n    toDo = toDo.filter(node => !almostDone.includes(node));\n    toDo.push(...almostDone.map(parent => invDependencies.get(parent)).flat(2));\n    toDo = toDo.filter(node => node !== undefined);\n    toDo = [...new Set(toDo)];\n    done.push(...almostDone);\n  }\n  return depth;\n};\n\n// Set timing info to UnitTime for whole json object\nconst fillTimingInfo = (data, graphInfo) => {\n  data.forEach((query, i) => {\n    const info = graphInfo[i];\n    if (info.selection.size > 0) {\n      const starts = setTimeToUnit(query, info);\n\n      const depth = nodeDepths(query, info.selection);\n      query.retrievals\n        .filter(r => info.selection.has(r.retrId))\n        .forEach(r => {\n          starts.set(\n            r.retrId,\n            depth.filter(rs => rs.includes(r.retrId)).map((_, d) => d)\n          );\n        });\n\n      info.starts = starts;\n    }\n  });\n};\n\nexport { fillTimingInfo, setTimeToUnit, nodeDepths, invertDependencies };\n","import { nodeDepths } from \"./fillTimingInfo\";\nimport { filterDependencies } from \"./selection\";\n\n/**\n * @param query: query with the list of retrievals with timing info\n * @param node: a node id (int or str depending of input format)\n * Returns the max of all elapsed time of the node\n */\nconst findTime = (query, node) => {\n  const nodeId = parseInt(node, 10);\n  let elapsed = 0;\n  try {\n    elapsed = Math.max(\n      ...query.retrievals.find(x => x.retrId === nodeId).timingInfo.elapsedTime\n    );\n  } catch {\n    // timingInfo is likely to be empty\n  }\n  return elapsed;\n};\n\nconst criticalPath = (query, info) => {\n  if (info.selection.size < 2) return new Set();\n\n  const deep2nodes = nodeDepths(query, info.selection);\n  const invDep = filterDependencies(query.dependencies, info.selection);\n  const critical = {};\n  let maxTime = 0;\n  let maxNode = null;\n\n  // We compute a critical score for each node, going down from depth == 0\n  deep2nodes.forEach(nodes => {\n    if (nodes === undefined) return;\n\n    nodes.forEach(node => {\n      const deps = invDep.get(node);\n      if (deps) {\n        // node has parents so critical = elapsedTime + max critical of parents\n        const elapsed = findTime(query, node);\n        let maxParentCritical = 0;\n        let parent = null;\n        deps.forEach(parentNode => {\n          if (critical[parentNode].time >= maxParentCritical) {\n            maxParentCritical = critical[parentNode].time;\n            parent = parentNode;\n          }\n        });\n        critical[node] = {\n          parent,\n          time: elapsed + maxParentCritical\n        };\n        if (elapsed + maxParentCritical > maxTime) {\n          maxTime = elapsed + maxParentCritical;\n          maxNode = node;\n        }\n      } else {\n        // node has no parent so critical = elapsedTime\n        const elapsed = findTime(query, node);\n        critical[node] = {\n          parent: null,\n          time: elapsed\n        };\n      }\n    });\n  });\n\n  // Recreate path going up from the node with worst critical and collect link ids\n  const criticalLinks = new Set();\n  while (critical[maxNode].parent !== null) {\n    const source = critical[maxNode].parent;\n    const target = maxNode;\n    criticalLinks.add(`${target}-${source}`);\n    maxNode = critical[maxNode].parent;\n  }\n\n  return criticalLinks;\n};\n\nexport default criticalPath;\n","import { invertDependencies } from \"./fillTimingInfo\";\nimport { filterDependencies } from \"./selection\";\nimport * as iterators from \"./iterators\";\n\nconst nodeCluster = (node, clust) => {\n  return iterators.forEach(clust.entries(), ([cl, nodes]) =>\n    nodes.includes(node) ? cl : undefined\n  );\n};\n\nconst computeClusters = (dependencies, selection) => {\n  if (dependencies[-1] === undefined) return new Map();\n\n  const deps = filterDependencies(dependencies, selection);\n  const invDep = invertDependencies(deps);\n  const clusters = new Map(); // Will contain nodes that havr been given a cluster\n  // We first consider that each root of the graph belong to a different cluster\n  const todo = invDep.get(-1).reduce((acc, node, index) => {\n    clusters.set(index, [node]);\n    acc.push(node);\n    return acc;\n  }, []);\n\n  while (todo.length !== 0) {\n    const node = todo.shift();\n    const clust1 = nodeCluster(node, clusters);\n    // if node has children, they should be in clust1\n    const nodeDeps = invDep.get(node);\n    if (nodeDeps) {\n      nodeDeps.forEach(parent => {\n        // Check if children alredy in cluster. If children in a different cluster,\n        // then merge the two clusters beause they are the same\n        const clust2 = nodeCluster(parent, clusters);\n        if (clust2 === undefined) {\n          clusters.get(clust1).push(parent);\n          todo.push(parent);\n        } else if (clust1 !== clust2) {\n          clusters.get(clust1).push(...clusters.get(clust2));\n          clusters.delete(clust2);\n        }\n      });\n    }\n  }\n\n  return clusters;\n};\n\nconst addClustersToNodes = (query, info) => {\n  const clusters = computeClusters(query.dependencies, info.selection);\n  // Reverse the mapping\n  let idx = 0;\n  return iterators.reduce(\n    clusters.values(),\n    (acc, ns) => {\n      const id = idx;\n      idx += 1;\n      return ns.reduce((store, node) => {\n        return store.set(node, id);\n      }, acc);\n    },\n    new Map()\n  );\n};\n\nexport default addClustersToNodes;\n","import { fillTimingInfo, nodeDepths } from \"./fillTimingInfo\";\nimport criticalPath from \"./criticalPath\";\nimport addClustersToNodes from \"./cluster\";\nimport { filterDependencies } from \"./selection\";\nimport * as its from \"./iterators\";\n\n/**\n * @param elapsed: the elapsed time of a node\n * Returns the radius the node should be displayed with\n */\nconst computeRadius = elapsed => {\n  if (elapsed < 5) return 20;\n  if (elapsed < 20) return 35;\n  if (elapsed < 100) return 50;\n  return 65;\n};\n\nconst getNodes = (dependencies, retrievals, info, depths) => {\n  // Creates a Set containing all nodes present in the dependencies, then converts\n  // it to an array and map each node number to its node object. Finally sorts nodes by\n  // their id because the links are order dependant.\n  return retrievals\n    .filter(r => info.selection.has(r.retrId))\n    .map(retrieval => {\n      const {\n        retrId,\n        timingInfo,\n        type,\n        measureProvider,\n        measures,\n        partitioning,\n        location,\n        childrenIds = []\n      } = retrieval;\n\n      const { elapsedTime = [0], startTime = [0] } = timingInfo;\n      const realStart = Math.min(...startTime);\n      const realEnd = Math.max(\n        ...startTime.map((start, i) => start + elapsedTime[i])\n      );\n      const realElapsed = realEnd - realStart;\n\n      const radius = computeRadius(realElapsed);\n      const yFixed = depths.get(retrId) * 150;\n      return {\n        id: retrId,\n        name: retrId.toString(),\n        childrenIds,\n        isSelected: false,\n        details: {\n          startTime: realStart,\n          elapsedTime: realElapsed,\n          startTimes: startTime,\n          elapsedTimes: elapsedTime,\n          type,\n          measureProvider,\n          measures,\n          partitioning,\n          location\n        },\n        clusterId: -1, // Set later when computing clusters\n        radius,\n        yFixed,\n        status: dependencies[-1].includes(retrId)\n          ? \"leaf\"\n          : dependencies[retrId]\n          ? null\n          : \"root\"\n      };\n    })\n    .sort((a, b) => a.id - b.id);\n};\n\nconst getLinks = (dependencies, retrievals, info) => {\n  const filtered = filterDependencies(dependencies, info.selection);\n  const retrIdxs = retrievals\n    .filter(r => info.selection.has(r.retrId))\n    .reduce((acc, r, i) => acc.set(r.retrId, i), new Map());\n  return its.reduce(\n    filtered.entries(),\n    (result, [key, values]) => {\n      if (key === -1) return result;\n\n      const source = retrIdxs.get(key);\n      return values.reduce((links, value) => {\n        const target = retrIdxs.get(value);\n        // The target may have been filtered (NoOp)\n        links.push({\n          source,\n          target,\n          id: `${key}-${value}`,\n          critical: false // Set later when computing the critical path\n        });\n        return links;\n      }, result);\n    },\n    []\n  );\n};\n\nconst findChildrenAndParents = (res, queries) => {\n  queries.forEach((query, queryId) => {\n    const { retrievals } = query;\n    retrievals.forEach(retrieval => {\n      retrieval.childrenIds = retrieval.underlyingDataNodes.map(\n        // give it its childrenIds\n        name => res.find(x => x.name === name).id\n      );\n\n      // give its children their parentId\n      retrieval.underlyingDataNodes.forEach(\n        // eslint-disable-next-line no-return-assign\n        name => (res.find(x => x.name === name).parentId = queryId)\n      );\n    });\n  });\n};\n\nconst buildD3 = (query, selection) => {\n  const info = { selection };\n  const { dependencies, retrievals } = query;\n  const ds = nodeDepths(query, info.selection);\n  const depths = ds.reduce((acc, ids, d) => {\n    return ids.reduce((store, id) => store.set(id, d), acc);\n  }, new Map());\n  const nodes = getNodes(dependencies, retrievals, info, depths);\n  const links = getLinks(dependencies, retrievals, info);\n  const criticalLinks = criticalPath(query, info);\n  links.forEach(link => {\n    link.critical = criticalLinks.has(link.id);\n  });\n  const clusters = addClustersToNodes(query, info);\n  nodes.forEach(node => {\n    node.clusterId = clusters.get(node.id);\n  });\n\n  return {\n    nodes,\n    links\n  };\n};\n\nconst parseJson = (data, selections) => {\n  const graphInfo = selections.map(selection => ({ selection }));\n  fillTimingInfo(data, graphInfo);\n\n  const res = data.map((query, queryId) => {\n    const { planInfo } = query;\n    const { clusterMemberId, mdxPass } = planInfo;\n\n    const passInfo = (mdxPass || \"Select_0\").split(\"_\");\n    const passNumber = parseInt(passInfo[1], 10);\n    return {\n      id: queryId,\n      parentId: null,\n      passType: passInfo[0],\n      pass: passNumber,\n      name: clusterMemberId\n    };\n  });\n\n  findChildrenAndParents(res, data);\n  return res;\n};\n\nexport default parseJson;\nexport { buildD3 };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport Overlay from \"react-bootstrap/Overlay\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport { nodeType, linkType } from \"../../types\";\nimport Link from \"./Link\";\nimport Node from \"./Node\";\nimport Menu from \"./Menu\";\nimport { updateGraph } from \"../../helpers/graphHelpers\";\nimport { buildD3 } from \"../../helpers/jsonToD3Data\";\nimport { filterByMeasures } from \"../../helpers/selection\";\nimport \"./Drawer.css\";\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDrawer: false,\n      selectedMeasures: [],\n      selectedRetrievals: null,\n      nodes: [],\n      links: [],\n      selectedNodeId: null,\n      // This is a tricky to force the graph to rebuild after a new graph is generated\n      epoch: 0\n    };\n    this.svgRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.generateGraph();\n  }\n\n  componentWillUnmount() {\n    this.props.restart();\n  }\n\n  clickNode = id => {\n    this.setState(prevState => {\n      const selectedNodeId = id === prevState.selectedNodeId ? null : id;\n      const { nodes } = prevState;\n      nodes.forEach(node => {\n        if (node.id === id) {\n          node.isSelected = node.isSelected !== true;\n        } else {\n          node.isSelected = false;\n        }\n      });\n      return { selectedNodeId, nodes };\n    });\n  };\n\n  changeGraph = (...args) => {\n    this.clickNode(null); // Unselect the current node( this. should be move to upated props)\n    this.props.changeGraph(...args);\n  };\n\n  toggleDrawer = () => {\n    this.setState(({ showDrawer }) => ({ showDrawer: showDrawer !== true }));\n  };\n\n  selectMeasure = ({ measure, selected }) => {\n    this.setState(\n      ({ selectedMeasures }) => {\n        if (selected) {\n          if (selectedMeasures.includes(measure)) {\n            return {};\n          }\n          const newSelection = [...selectedMeasures, measure];\n          return {\n            selectedMeasures: newSelection,\n            selectedRetrievals: filterByMeasures({\n              retrievals: this.props.query.retrievals,\n              dependencies: this.props.query.dependencies,\n              measures: newSelection,\n              selection: this.props.selection\n            })\n          };\n        }\n\n        const newSelection = selectedMeasures.filter(m => m !== measure);\n        return {\n          selectedMeasures: newSelection,\n          selectedRetrievals:\n            newSelection.length === 0\n              ? null\n              : filterByMeasures({\n                  retrievals: this.props.query.retrievals,\n                  dependencies: this.props.query.dependencies,\n                  measures: newSelection,\n                  selection: this.props.selection\n                })\n        };\n      },\n      () => this.generateGraph()\n    );\n  };\n\n  generateGraph() {\n    const { query, selection } = this.props;\n    const { selectedRetrievals, epoch } = this.state;\n    if (query === undefined) return;\n\n    const { nodes, links } = buildD3(query, selectedRetrievals || selection);\n\n    const d3Graph = d3\n      .select(ReactDOM.findDOMNode(this))\n      .attr(\"width\", window.innerWidth)\n      .attr(\"height\", window.innerHeight - 56);\n\n    const clusters = _(nodes).map(n => n.clusterId);\n    const minC = clusters.min();\n    const maxC = clusters.max();\n    const viewCenter = window.innerWidth / 2;\n    const clusterCenter = parseInt((maxC - minC + 1) / 2 + minC - 0.5, 10); // Floor value\n    const force = d3\n      .forceSimulation(nodes)\n      .force(\"charge\", d3.forceManyBody().strength(-1000))\n      .force(\"link\", d3.forceLink(links).distance(150))\n      .force(\n        \"collide\",\n        d3.forceCollide().radius(d => d.radius)\n      )\n      .force(\"forceY\", d3.forceY(d => d.yFixed).strength(1))\n      .force(\n        \"forceX\",\n        d3\n          .forceX(\n            d =>\n              viewCenter +\n              ((d.clusterId - clusterCenter) * window.innerWidth) / 2\n          )\n          .strength(0.1)\n      );\n\n    function dragStarted(d) {\n      if (!d3.event.active) force.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragging(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n\n    function dragEnded(d) {\n      if (!d3.event.active) force.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    d3.select(window).on(\"resize\", () => {\n      d3Graph\n        .attr(\"width\", window.innerWidth)\n        .attr(\"height\", window.innerHeight - 56);\n    });\n\n    d3Graph.call(\n      d3.zoom().on(\"zoom\", () => {\n        this.clickNode(null);\n        return d3\n          .select(\"svg\")\n          .select(\"g\")\n          .attr(\"transform\", d3.event.transform);\n      })\n    );\n\n    force.on(\"tick\", () => {\n      d3Graph.call(updateGraph);\n    });\n\n    this.setState({ nodes, links, epoch: epoch + 1 }, () => {\n      d3Graph.selectAll(\"g.node\").call(\n        d3\n          .drag()\n          .on(\"start\", dragStarted)\n          .on(\"drag\", dragging)\n          .on(\"end\", dragEnded)\n      );\n    });\n  }\n\n  render() {\n    const { nodes, links } = this.state;\n    const Nodes = nodes.map(node => (\n      <Node\n        node={node}\n        key={node.id}\n        clickNode={this.clickNode}\n        changeGraph={this.changeGraph}\n      />\n    ));\n    const Links = links.map(link => (\n      <Link key={link.id} link={link} href=\"/\" />\n    ));\n\n    return (\n      <>\n        <svg className=\"graph\" ref={this.svgRef}>\n          <g key={`e${this.state.epoch}`}>\n            {Links}\n            {Nodes}\n          </g>\n        </svg>\n        <div\n          className={`drawer-trigger ${this.state.showDrawer ? \"open\" : \"\"}`}\n          variant=\"outline-dark\"\n          onClick={this.toggleDrawer}\n        >\n          Menu\n        </div>\n        <Overlay\n          show={this.state.showDrawer}\n          placement=\"top-start\"\n          target={this.svgRef.current}\n        >\n          <div className=\"drawer\">\n            <Menu\n              measures={this.props.query.querySummary.measures}\n              selectedMeasures={this.state.selectedMeasures}\n              onSelectedMeasure={this.selectMeasure}\n            />\n          </div>\n        </Overlay>\n      </>\n    );\n    // FIXME remove the extra space taken by the button\n  }\n}\n\nGraph.propTypes = {\n  nodes: PropTypes.arrayOf(nodeType).isRequired,\n  links: PropTypes.arrayOf(linkType).isRequired,\n  clickNode: PropTypes.func.isRequired,\n  restart: PropTypes.func.isRequired,\n  changeGraph: PropTypes.func.isRequired\n};\n\nexport default Graph;\n","const typeLabels = new Map([\n  [\"DistributedAggregatesRetrieval\", \"Distributed Retrieval\"],\n  [\"DistributedPostProcessedRetrieval\", \"PostProcessor\"],\n  [\"JITPrimitiveAggregatesRetrieval\", \"JIT Retrieval\"],\n  [\"NoOpPrimitiveAggregatesRetrieval\", \"No-op\"],\n  [\"PostProcessedAggregatesRetrieval\", \"PostProcessor\"],\n  [\"PostProcessedResultsMerger\", \"Merger\"],\n  [\"PrimitiveResultsMerger\", \"Merger\"],\n  [\"RangeSharingPrimitiveAggregatesRetrieval\", \"RangeSharing\"]\n]);\n\nconst type = value => typeLabels.get(value) || `<${value}>`;\n\nexport { type };\n","import React, { Component } from \"react\";\nimport Toast from \"react-bootstrap/Toast\";\nimport \"./Timeline.css\";\nimport Details from \"../Details/Details\";\nimport * as labels from \"../../helpers/labels\";\n\n/* TODO how to dilate time not to have long boxes taking a lot of spaces\n * We must only dilate time for periods where all entries are in similar\n * buckets. */\n\nconst placeRetrieval = (retrievals, state, entry) => {\n  const { lines, last } = state;\n  // Find the first one whose last is before entry start\n  const candidates = last.filter(t => t <= entry.start);\n  const idx =\n    candidates.length > 0\n      ? last.indexOf(Math.max(...candidates))\n      : lines.length;\n  if (lines[idx]) {\n    lines[idx].push(entry);\n  } else {\n    lines[idx] = [entry];\n  }\n  last[idx] = entry.end;\n  return state;\n\n  // TODO may be smart to have a way to distribute 0ms on different lines\n};\n\nconst computeLines = ({ retrievals }) => {\n  const result = retrievals\n    .filter(r => r.timingInfo.startTime && r.timingInfo.elapsedTime)\n    .map(r =>\n      r.timingInfo.startTime.map((time, i) => ({\n        id: r.retrId,\n        partition: i,\n        start: time,\n        end: r.timingInfo.elapsedTime[i] + time\n      }))\n    )\n    .flat()\n    .sort((a, b) => {\n      return a.start - b.start;\n    })\n    .reduce(placeRetrieval.bind(null, retrievals), {\n      lines: [],\n      last: []\n    });\n\n  result.lines.sort((a, b) => a[a.length - 1].end - b[b.length - 1].end);\n  return result.lines;\n};\n\nconst margin = 0;\nconst boxHeight = 25;\nconst boxMargin = 5;\nconst widthFactor = 5;\n\n// Logic for a factor of 5\nconst Box = ({ rowIdx, entry, retrieval, selection, onSelect }) => {\n  if (retrieval === undefined || entry.id !== retrieval.retrId) {\n    throw new Error(\n      `Inconsistent state: ${JSON.stringify(entry)} / ${JSON.stringify(\n        retrieval\n      )}`\n    );\n  }\n  const selected = selection.some(\n    ([id, partition]) => entry.id === id && entry.partition === partition\n  );\n  const key = `${entry.id}-${entry.partition}`;\n  if (entry.start < entry.end) {\n    const x = (entry.start + 1) * widthFactor - 1;\n    const w = (entry.end - entry.start - 1) * widthFactor + 2;\n    return (\n      <rect\n        key={key}\n        className={`timeline-box ${selected ? \"selected\" : \"\"}`}\n        x={margin + x}\n        y={margin + rowIdx * (boxMargin + boxHeight)}\n        width={w}\n        height={boxHeight}\n        onClick={() => onSelect(entry)}\n      />\n    );\n  }\n  const x = entry.start * widthFactor + 2;\n  const w = 1;\n  return (\n    <rect\n      key={key}\n      className={`timeline-box ${selected ? \"selected\" : \"\"}`}\n      x={margin + x}\n      y={margin + rowIdx * (boxMargin + boxHeight)}\n      width={w}\n      height={boxHeight}\n      onClick={() => onSelect(entry)}\n    />\n  );\n};\n\nconst Row = ({ row, idx, retrievals, selection, onSelect }) => {\n  const boxes = row.map(entry =>\n    Box({\n      rowIdx: idx,\n      entry,\n      retrieval: retrievals[entry.id],\n      selection,\n      onSelect\n    })\n  );\n  return (\n    <g className=\"timeline-row\" key={idx}>\n      {boxes}\n    </g>\n  );\n};\n\nconst Rows = ({ rows, retrievals, selection, onSelect }) => {\n  const height = 2 * margin + rows.length * (boxHeight + boxMargin) - boxMargin;\n  const width =\n    2 * margin +\n    widthFactor *\n      Math.max(...rows.map(row => row[row.length - 1]).map(entry => entry.end));\n  return (\n    <div className=\"timeline-rows\">\n      <svg width={width} height={height}>\n        {rows.map((row, idx) =>\n          Row({ row, idx, retrievals, selection, onSelect })\n        )}\n      </svg>\n    </div>\n  );\n};\n\nclass Timeline extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lines: [],\n      selection: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ lines: computeLines(this.props.plan) });\n  }\n\n  static getDerivedStateFromProps(newProps) {\n    return { lines: computeLines(newProps.plan) };\n  }\n\n  selectBox = entry => {\n    this.setState(({ selection }) => {\n      const changed = [...selection];\n      const idx = selection.findIndex(\n        ([id, partition]) => id === entry.id && partition === entry.partition\n      );\n      if (idx >= 0) {\n        changed.splice(idx, 1);\n      } else {\n        changed.push([entry.id, entry.partition]);\n      }\n      return { selection: changed };\n    });\n  };\n\n  closeBox = ([keyId, keyPartition]) => {\n    this.setState(({ selection }) => {\n      const idx = selection.findIndex(\n        ([id, partition]) => id === keyId && partition === keyPartition\n      );\n      if (idx >= 0) {\n        const changed = [...selection];\n        changed.splice(idx, 1);\n        return { selection: changed };\n      }\n      return {};\n    });\n  };\n\n  render() {\n    const { selection, lines } = this.state;\n    const { plan } = this.props;\n    return (\n      <div className=\"timeline\">\n        <Rows\n          rows={lines}\n          retrievals={plan.retrievals}\n          selection={selection}\n          onSelect={this.selectBox}\n        />\n        <div className=\"timeline-details\">\n          <div style={{ width: selection.length * 355 }}>\n            {selection.map(key => {\n              const [id, partition] = key;\n              const retrieval = plan.retrievals[id];\n              return (\n                <Toast\n                  key={retrieval.retrId}\n                  className=\"entry\"\n                  onClose={() => this.closeBox(key)}\n                >\n                  <Toast.Header>\n                    Retrieval&nbsp;\n                    <strong className=\"mr-auto\">#{id}</strong>\n                    <small>{labels.type(retrieval.type)}</small>\n                  </Toast.Header>\n                  <Toast.Body className=\"body\">\n                    {Details({\n                      ...retrieval,\n                      ...retrieval.timingInfo,\n                      partition\n                    })}\n                  </Toast.Body>\n                </Toast>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timeline;\n","import React, { Component } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport FuzzySearch from \"fuzzy-search\";\nimport _ from 'lodash';\n\nconst timingLabels = new Map([\n  [\"executionContextCreationTime\", \"Context creation time\"],\n  [\"finalizationTime\", \"Query preparation\"],\n  [\"planningTime\", \"Planning duration\"],\n  [\"queryExecutionTime\", \"Execution duration\"]\n]);\nconst timingLabel = name => timingLabels.get(name) || \"<unknown>\";\nconst getHumanDuration = duration => `${duration} in ms`;\n\nconst Timings = info => {\n  if (info) {\n    return (\n      <ul>\n        {Object.entries(info.globalTimings).map(([timing, duration]) => (\n          <li key={timing}>\n            {timingLabel(timing)}: {getHumanDuration(duration)} ({duration} ms)\n          </li>\n        ))}\n      </ul>\n    );\n  }\n  return (\n    <p>\n      <i>Timings are not available</i>\n    </p>\n  );\n};\n\nclass MeasureList extends Component {\n  constructor(props) {\n    super(props);\n    const filtered = [...props.measures];\n    filtered.sort();\n    this.state = {\n      filter: \"\",\n      filtered\n    };\n  }\n\n  changeFilter = event => {\n    const needle = event.target.value.trim();\n    let result;\n    if (needle === \"\") {\n      result = [...this.props.measures];\n    } else {\n      const searcher = new FuzzySearch(this.props.measures, undefined, {\n        caseSensitive: true\n      });\n      result = searcher.search(needle);\n    }\n    result.sort();\n    this.setState({ filtered: result });\n  };\n\n  render() {\n    const { filtered: measures } = this.state;\n    const cols = 3;\n    const rows = parseInt((measures.length - 0.1) / cols, 10) + 1;\n    const cidx = _.times(cols);\n    const ridx = _.times(rows);\n    return (\n      <>\n        <Form>\n          <Form.Group>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Measure name\"\n              defaultValue={this.state.filter}\n              onChange={this.changeFilter}\n            />\n          </Form.Group>\n        </Form>\n        <Table striped bordered hover size=\"sm\">\n          <tbody>\n            {ridx.map(r => (\n              <tr key={r}>\n                {cidx.map(c => {\n                  const measure = measures[r + c * rows];\n                  const key = measure || `m${r + c * rows}`;\n                  return <td key={key}>{measure}</td>;\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nconst QuerySummary = ({ querySummary: summary, planInfo: info }) => {\n  return (\n    <div>\n      <p>Total number of retrievals: {summary.totalRetrievals}</p>\n      <h4>Query timings</h4>\n      {Timings(info)}\n      <h4>Measures</h4>\n      <MeasureList measures={summary.measures} />\n      <h4>Retrievals per type</h4>\n      <ul>\n        {Object.entries(summary.retrievalCountByType).map(([type, count]) => (\n          <li key={type}>\n            <b>{type}</b>: {count}\n          </li>\n        ))}\n      </ul>\n      <h4>Retrievals per partitioning</h4>\n      <ul>\n        {Object.entries(summary.partitioningCountByType).map(\n          ([type, count]) => (\n            <li key={type}>\n              <b>{type}</b>: {count}\n            </li>\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nconst MultiPivotSummary = ({ queries, pivots, selected }) => {\n  return (\n    <>\n      <h4>Underlying queries</h4>\n      <Tabs defaultActiveKey={pivots[selected].name}>\n        {pivots.map(pivot => (\n          <Tab eventKey={pivot.name} title={pivot.name} key={pivot.name}>\n            {QuerySummary(queries[pivot.id])}\n          </Tab>\n        ))}\n      </Tabs>\n    </>\n  );\n};\n\nconst computeGlobalSummary = (queries, rootInfo, underlyingInfos) => {\n  const summaries = [rootInfo, ...underlyingInfos].map(\n    info => queries[info.id].querySummary\n  );\n  const measures = summaries.reduce(\n    (acc, summary) =>\n      summary.measures.reduce((store, measure) => store.add(measure), acc),\n    new Set()\n  );\n  const totalRetrievals = summaries.reduce(\n    (acc, summary) => acc + summary.totalRetrievals,\n    0\n  );\n  const retrievalCountByType = summaries.reduce(\n    (acc, summary) =>\n      Object.entries(summary.retrievalCountByType).reduce(\n        (res, [type, count]) => {\n          if (Reflect.has(res, type)) {\n            res[type] += count;\n          } else {\n            res[type] = count;\n          }\n          return res;\n        },\n        acc\n      ),\n    {}\n  );\n  const partitioningCountByType = summaries.reduce(\n    (acc, summary) =>\n      Object.entries(summary.partitioningCountByType).reduce(\n        (res, [type, count]) => {\n          if (Reflect.has(res, type)) {\n            res[type] += count;\n          } else {\n            res[type] = count;\n          }\n          return res;\n        },\n        acc\n      ),\n    {}\n  );\n  return {\n    measures: [...measures],\n    totalRetrievals,\n    retrievalCountByType,\n    partitioningCountByType\n  };\n};\n\nconst findRootInfo = (info, currentQuery) => {\n  let query = info[currentQuery];\n  while (query.parentId !== null) {\n    query = info[query.parentId];\n  }\n  return query;\n};\n\nexport default ({ queries, currentQuery, info }) => {\n  const rootInfo = findRootInfo(info, currentQuery);\n  const rootId = rootInfo.id;\n  const rootQuery = queries[rootId];\n  const underlyingQueries = info.filter(inf => inf.parentId === rootId);\n\n  let summary;\n  if (rootQuery.retrievals.length === 0) {\n    summary = \"Empty query (MDX interal operation)\";\n  } else if (underlyingQueries.length > 0) {\n    const fullInfo = {\n      id: queries.length,\n      name: \"Global summary\"\n    };\n    const globalSummary = computeGlobalSummary(\n      queries,\n      rootInfo,\n      underlyingQueries\n    );\n    const allSummaries = [fullInfo, rootInfo, ...underlyingQueries];\n    summary = MultiPivotSummary({\n      pivots: allSummaries,\n      queries: [...queries, { querySummary: globalSummary }],\n      selected: allSummaries.findIndex(inf => inf.id === currentQuery)\n    });\n  } else {\n    summary = QuerySummary(rootQuery);\n  }\n  return (\n    <div>\n      <h3>\n        MDX pass {rootInfo.passType} ({currentQuery})\n      </h3>\n      {summary}\n    </div>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst NavBar = ({ navigate, goBackButton, passChooser }) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"\">QueryViz</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"\" onClick={() => navigate(\"input\")}>\n          Input\n        </Nav.Link>\n        <Nav.Link href=\"\" onClick={() => navigate(\"summary\")}>\n          Summary\n        </Nav.Link>\n        <Nav.Link href=\"\" onClick={() => navigate(\"graph\")}>\n          Graph\n        </Nav.Link>\n        <Nav.Link href=\"\" onClick={() => navigate(\"timeline\")}>\n          Timeline\n        </Nav.Link>\n      </Nav>\n      <Nav className=\"ml-auto\">\n        {passChooser}\n        {goBackButton}\n      </Nav>\n    </Navbar>\n  );\n};\n\nNavBar.propTypes = {\n  navigate: PropTypes.func.isRequired,\n  goBackButton: PropTypes.element.isRequired,\n  passChooser: PropTypes.element.isRequired\n};\n\nexport default NavBar;\n","import _ from \"lodash\";\n\nconst RETRIEVAL = /Retrieval #(\\d+): ([\\w_]+)( \\(see)?/;\nconst PROPERTY_EXPR = /\\s*([\\w\\-_ ()]+)= (.+)\\s*/;\nconst PIVOT_EXPR = /\\s*(\\w+)\\s+\\[id=(.+?), epoch=(\\d+)]/;\nconst PLAN_EXPR = /\\s*([\\w\\-_ ()]+?)\\s*: (.+)\\s*/;\nconst PARTITION_RESULT = /(?:^|\\s+)Result for (\\d+)\\s*: (EMPTY|.*)/;\nconst DEPENDENCY_START = /which depends on \\{/;\nconst DEPENDENCY_END = /^\\s*}\\s*$/;\nconst PARTITION_PROPERTY = \"Contributed partitions\";\nconst last = array => (array.length > 0 ? array[array.length - 1] : undefined);\nconst parseNewRetrieval = (_line, match) => ({\n  id: parseInt(match[1], 10),\n  type: match[2],\n  ref: match[3] !== undefined,\n  dependencies: [],\n  parents: [],\n  properties: {}\n});\nconst parseProperty = (_line, match) => ({\n  key: match[1],\n  value: match[2]\n});\n\nconst matchLine = (state, line, matchClauses) => {\n  const entries = matchClauses.entries();\n  for (let entry = entries.next(); !entry.done; entry = entries.next()) {\n    const [expr, action] = entry.value;\n    const match = expr.exec(line);\n    if (match !== null) {\n      action(state, match, line);\n      return;\n    }\n  }\n};\n\n\nconst RETRIEVAL_CLAUSES = new Map([\n  [RETRIEVAL, (state, match, line) => {\n    const retrieval = parseNewRetrieval(line, match);\n    if (retrieval.ref) {\n      state.current = state.retrievals[retrieval.id];\n    } else {\n      state.current = retrieval;\n      state.retrievals[retrieval.id] = retrieval;\n    }\n\n    const parent = last(state.parents);\n    if (parent) {\n      parent.dependencies.push(parseInt(retrieval.id, 10));\n    }\n  }],\n  [PARTITION_RESULT, (state, match) => {\n    // Before properties as results contain '=' and more\n    const partitionId = match[1];\n    const result = match[2];\n    if (result !== \"EMPTY\") {\n      const partitions = state.current.properties[PARTITION_PROPERTY] || [];\n      partitions.push(partitionId);\n      state.current.properties[PARTITION_PROPERTY] = partitions;\n    }\n  }],\n  [PROPERTY_EXPR, (state, match, line) => {\n    const property = parseProperty(line, match);\n    state.current.properties[property.key] = property.value;\n  }],\n  [DEPENDENCY_START, (state) => state.parents.push(state.current)],\n  [DEPENDENCY_END, (state) => state.parents.pop()]\n]);\n\nconst parseLine = (state, line) => {\n  matchLine(state, line, RETRIEVAL_CLAUSES);\n};\n\nconst parseGeneral = (state, line) => {\n  const [, prop, value] = PLAN_EXPR.exec(line);\n  if (prop === \"ActivePivot\") {\n    const [, type, id, epoch] = PIVOT_EXPR.exec(value);\n    state.info.pivotType = type;\n    state.info.pivotId = id;\n    state.info.epoch = epoch;\n  } else if (prop === \"RetrieverActivePivotAggregatesRetriever\") {\n    state.info.retrieverType = value;\n  }\n};\n\nconst parseContext = (state, line) => {\n  const [, key, value] = PLAN_EXPR.exec(line);\n  if (key === \"ICubeFilter\") {\n    state.rootFilter = value;\n  } else {\n    state.info.contextValues[key] = value;\n  }\n};\n\nconst PROP_MAPPING = {\n  Continuous: \"continuous\",\n  \"Range sharing\": \"rangeSharing\",\n  \"Missed prefectches\": \"missedPrefetchBehavior\",\n  Cache: \"aggregatesCache\"\n};\nconst parseProps = (state, line) => {\n  const [, prop, value] = PLAN_EXPR.exec(line);\n  const newProp = PROP_MAPPING[prop];\n  if (newProp) {\n    state.info[newProp] = value;\n  }\n};\n\nconst TIME_PROP_MAPPING = {\n  \"Planning time\": \"PLANNING\",\n  \"Execution context creation time\": \"CONTEXT\",\n  \"Planning finalization time\": \"FINALIZATION\"\n};\nconst parseTotalTime = (state, line) => {\n  const [, prop, value] = PLAN_EXPR.exec(line);\n  const newProp = TIME_PROP_MAPPING[prop];\n  if (newProp) {\n    state.info.globalTimings[newProp] = parseInt(value, 10);\n  }\n};\n\nconst parseExecution = (state, line) => {\n  const [, prop, value] = PLAN_EXPR.exec(line);\n  if (prop === \"Total query execution time\") {\n    state.info.globalTimings.EXECUTION = parseInt(value, 10);\n  }\n};\n\nconst mapping = {\n  \"General information:\": parseGeneral,\n  \"Context values:\": parseContext,\n  \"Additional properties:\": parseProps,\n  \"Planning:\": parseTotalTime,\n  \"Execution:\": parseExecution,\n  \"Query plan:\": parseLine,\n  \"Query Plan Summary:\": () => { } // No-op\n};\n\nconst parseDefault = (state, line) => {\n  const { last: lastLine } = state;\n  state.last = line;\n  if (line in mapping) {\n    return false; // Marker line, we have to wait one turn\n  }\n  if (line.includes(\"-----\")) {\n    state.phase = lastLine;\n    return false;\n  }\n  return state.phase !== undefined;\n};\n\nconst parseLines = (state, lines, from, to) => {\n  for (let i = from; i < to; i += 1) {\n    const line = lines[i].trim();\n    if (!/^\\s*$/.test(line)) {\n      if (parseDefault(state, line)) {\n        mapping[state.phase](state, line);\n      }\n    } else {\n      state.phase = undefined;\n    }\n  }\n};\n\nconst parseV1 = (input, tickCallback) => {\n  return new Promise(resolve => {\n    const accumulator = {\n      info: {\n        contextValues: {},\n        globalTimings: {}\n      },\n      root: {\n        dependencies: []\n      },\n      retrievals: {},\n      current: null,\n      parents: []\n    };\n    accumulator.parents.push(accumulator.root);\n\n    const lines = input.split(/\\n/);\n    let currentLine = 0;\n    (function loop() {\n      if (currentLine < lines.length) {\n        const to = Math.min(currentLine + 100, lines.length);\n        parseLines(accumulator, lines, currentLine, to);\n        currentLine = to;\n        tickCallback(currentLine, lines.length);\n\n        setTimeout(loop, 5);\n      } else {\n        resolve(accumulator);\n      }\n    })();\n  }).then(result => {\n    // Iterate through nodes to record parents\n    Object.keys(result.retrievals).forEach(rId => {\n      const retrieval = result.retrievals[rId];\n      retrieval.dependencies.forEach(dId => {\n        const dependency = result.retrievals[dId];\n        dependency.parents.push(parseInt(rId, 10));\n      });\n    });\n\n    return result;\n  });\n};\n\nconst computeIfAbsent = (dic, key, value) => {\n  if (!(key in dic)) {\n    dic[key] = value;\n  }\n  return dic[key];\n};\n\nconst createDependencyList = v1Structure => {\n  return Object.values(v1Structure.retrievals).reduce(\n    (acc, retrieval) => {\n      if (retrieval.parents.length === 0) {\n        computeIfAbsent(acc, \"-1\", []).push(retrieval.id);\n      } else {\n        retrieval.parents.forEach(rId =>\n          computeIfAbsent(acc, rId, []).push(retrieval.id)\n        );\n      }\n      return acc;\n    },\n    { \"-1\": [] }\n  );\n};\n\nconst DIMENSION_EXPR = /([\\w\\s]+)@([\\w\\s]+):([\\w\\s\\\\]+)=(.+)/;\nconst parseLocation = location => {\n  if (location === undefined || location === \"GRAND TOTAL\") {\n    return [];\n  }\n\n  return location.split(/\\s*,\\s*/).map(part => {\n    const match = DIMENSION_EXPR.exec(part);\n    const level = match[3].split(/\\\\/);\n    const path = match[4]\n      .split(/\\\\/)\n      .map(member =>\n        member[0] === \"[\" ? member.substring(1, member.length - 1) : member\n      );\n    return {\n      dimension: match[1],\n      hierarchy: match[2],\n      level,\n      path\n    };\n  });\n};\nconst parseMeasures = measures => {\n  return measures === undefined\n    ? []\n    : measures.substring(1, measures.length - 1).split(/\\s*,\\s*/);\n};\nconst parseTimings = props => {\n  const starts = props[\"Start time   (in ms)\"];\n  const elapsed = props[\"Elapsed time (in ms)\"];\n  if (starts && elapsed) {\n    return {\n      startTime: JSON.parse(starts),\n      elapsedTime: JSON.parse(elapsed)\n    };\n  }\n  return {};\n};\n\nconst GLOBAL_FILTER = \"Global query filter\";\nconst createFilterMap = v1Structure => {\n  const filters = Object.values(v1Structure.retrievals).reduce(\n    (acc, retrieval) => {\n      const filter = retrieval.properties.Filter;\n      if (filter && !acc.has(filter)) {\n        acc.set(filter, acc.size);\n      }\n      return acc;\n    },\n    new Map([[GLOBAL_FILTER, 0]])\n  );\n\n  // Reverse the mapping\n  const result = {};\n  for (\n    let it = filters.entries(), entry = it.next();\n    !entry.done;\n    entry = it.next()\n  ) {\n    const [filter, idx] = entry.value;\n    result[idx] = filter === GLOBAL_FILTER ? v1Structure.rootFilter : filter;\n  }\n  return result;\n};\n\nconst findFilter = (filters, needle) => {\n  if (needle === GLOBAL_FILTER || needle === undefined) {\n    return 0;\n  }\n  const entries = Object.entries(filters);\n  const i = entries.findIndex(e => e[1] === needle);\n  return entries[i][0];\n};\n\nconst createRetrievalMap = (v1Structure, filters) => {\n  return Object.values(v1Structure.retrievals).map(retrieval => {\n    return {\n      retrId: parseInt(retrieval.id, 10),\n      type: retrieval.type,\n      location: parseLocation(retrieval.properties.Location),\n      measures: parseMeasures(retrieval.properties.Measures),\n      timingInfo: parseTimings(retrieval.properties),\n      partitioning: retrieval.properties.Partitioning,\n      filterId: findFilter(filters, retrieval.properties.Filter),\n      measureProvider: retrieval.properties[\"Measures provider\"],\n      underlyingDataNodes: [] // Not supported in previous versions\n    };\n  });\n};\n\nconst reverseDependencies = dependencies => {\n  return Object.keys(dependencies)\n    .map(i => parseInt(i, 10))\n    .reduce((acc, parent) => {\n      return dependencies[parent]\n        .map(i => parseInt(i, 10))\n        .reduce((a, id) => {\n          let set = a.get(id);\n          if (!set) {\n            set = new Set();\n            a.set(id, set);\n          }\n          set.add(parent);\n          return a;\n        }, acc);\n    }, new Map());\n};\n\nconst computeFakeStart = (id, retrievals, dependencies) => {\n  const start = Math.max(\n    ...dependencies[id]\n      .map(i => retrievals.get(parseInt(i, 10)).timingInfo)\n      .map(({ startTime }) => (startTime ? startTime[0] : 0))\n  );\n  return start + 10;\n};\n\nconst setSimulatedTimeInfo = (retrievals, dependencies) => {\n  const dependents = reverseDependencies(dependencies);\n  const retrMap = retrievals.reduce((acc, r) => {\n    acc.set(r.retrId, r);\n    return acc;\n  }, new Map());\n\n  // Set a default duration\n  retrievals.forEach(r => {\n    if (!r.type.includes(\"NoOp\")) {\n      r.timingInfo.elapsedTime = [10];\n      const deps = dependencies[r.retrId];\n      r.timingInfo.startTime = [deps ? -deps.length : 0];\n    }\n  });\n\n  const queue = retrievals\n    .filter(r => r.type.includes(\"NoOp\") || r.timingInfo.startTime[0] === 0)\n    .map(r => r.retrId);\n  let safeCount = 0;\n  while (queue.length > 0) {\n    if (safeCount > 5000) {\n      console.log(\"oops. Too much\");\n      return;\n    }\n    safeCount += 1;\n\n    const id = queue.shift();\n    dependents.get(id).forEach(did => {\n      const parent = retrMap.get(did);\n      if (did !== -1 && ++parent.timingInfo.startTime[0] === 0) {\n        parent.timingInfo.startTime[0] = computeFakeStart(\n          did,\n          retrMap,\n          dependencies\n        );\n        queue.push(did);\n      }\n    });\n  }\n\n  const incomplete = retrievals\n    .filter(r => r.timingInfo.startTime && r.timingInfo.startTime[0] < 0)\n    .map(r => r.retrId);\n  if (incomplete.length > 0) {\n    throw new Error(`Remaining retrievals without timings: ${incomplete}`);\n  }\n};\n\nconst createSummary = retrievals => {\n  const measures = _(retrievals)\n    .flatMap(r => r.measures)\n    .uniq()\n    .value();\n\n  const retrievalCountByType = _.countBy(retrievals, r => r.type);\n  const partitioningCountByType = _.countBy(retrievals, r => r.partitioning);\n\n  return {\n    measures,\n    totalRetrievals: _.size(retrievals),\n    retrievalCountByType,\n    partitioningCountByType\n  };\n};\n\nconst convertToV2 = v1Structure => {\n  const dependencies = createDependencyList(v1Structure);\n  const queryFilters = createFilterMap(v1Structure);\n  const retrievals = createRetrievalMap(v1Structure, queryFilters);\n  if (retrievals[0].timingInfo.startTime === undefined) {\n    setSimulatedTimeInfo(retrievals, dependencies);\n  }\n  const querySummary = createSummary(retrievals);\n\n  return [\n    {\n      planInfo: v1Structure.info,\n      dependencies,\n      queryFilters,\n      retrievals,\n      querySummary\n    }\n  ];\n};\n\nexport { parseV1, convertToV2 };\n","/** Cache of the connections to servers. */\nconst serverCache = new Map();\n\n/**\n * Clears the cache of servers.\n *\n * This is mostly interesting for unit-tests, if any.\n */\nconst clearCache = () => {\n  serverCache.clear();\n};\n\n/**\n * Resolves the version of the API of the target server.\n * @param {String} url url of the target server\n * @returns {Promise<String>} promise with the URL to the pivot service\n */\nconst resolveQueryEndpoint = url => {\n  const cached = serverCache.get(url);\n  if (cached) {\n    return cached;\n  }\n\n  const resolution = new Promise((resolve, reject) => {\n    fetch(`${url}/versions/rest`).then(\n      async response => {\n        const versions = await response.json();\n        const pivotService = versions.apis.pivot.versions[0].restPath;\n        resolve(`${url}${pivotService}`);\n      },\n      err => {\n        console.error(`Cannot find version of ${url}`, err);\n        serverCache.delete(url);\n        reject(new Error(\"Unavailable\"));\n      }\n    );\n  });\n  serverCache.set(url, resolution);\n  return resolution;\n};\n\n/**\n * Queries the server for the query plan of a given request.\n * @param payload payload to send to the server\n * @returns the exported query plan for the provided query\n */\nconst queryServer = async ({ url, credentials, query }) => {\n  const baseUrl = await resolveQueryEndpoint(url);\n  const queryUrl = `${baseUrl}/cube/query/mdx/queryplan`;\n  const body = {\n    mdx: query\n  };\n  const response = await fetch(queryUrl, {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: credentials\n    },\n    body: JSON.stringify(body)\n  });\n  const payload = await response.json();\n  return payload.data;\n};\n\nexport default queryServer;\nexport { clearCache };\n","import React from \"react\";\n\n// callback will be changeGraph()\nconst goBackToParentQueryButton = (currentParentId, callback) => {\n  if (currentParentId !== null) {\n    return (\n      <input\n        className=\"btn btn-outline-light ml-3\"\n        type=\"button\"\n        value=\"Go Back To Parent Query\"\n        onClick={() => callback(currentParentId)}\n      />\n    );\n  }\n  return <></>;\n};\n\nexport default goBackToParentQueryButton;\n","import { NavDropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nconst passLabel = ({ pass: passId, passType }) => `[${passId}] - ${passType}`;\n\n// callback will be changePass()\n// Passes are executed from higher to lower\nconst passChooser = (allQueries, currentPassId, callback) => {\n  const allPassIds = allQueries\n    .filter(query => query.parentId === null)\n    .sort((a, b) => b.pass - a.pass);\n  if (allPassIds.length > 1) {\n    const activePass = allPassIds.find(p => p.pass === currentPassId);\n    const dropName = activePass ? passLabel(activePass) : \"Query pass\";\n    return (\n      <NavDropdown title={dropName} id=\"basic-nav-dropdown\" alignRight>\n        {allPassIds.map(pass => (\n          <NavDropdown.Item\n            key={pass.pass}\n            as=\"button\"\n            active={pass.pass === currentPassId}\n            onClick={() => callback(pass.pass)}\n          >\n            {passLabel(pass)}\n          </NavDropdown.Item>\n        ))}\n      </NavDropdown>\n    );\n  }\n  return <></>;\n};\n\nexport default passChooser;\n","import React, { Component } from \"react\";\nimport Input from \"./Components/Input/Input\";\nimport Graph from \"./Components/Graph/Graph\";\nimport Timeline from \"./Components/Timeline/Timeline\";\nimport Summary from \"./Components/Summary/Summary\";\nimport NavBar from \"./Components/NavBar/NavBar\";\nimport parseJson from \"./helpers/jsonToD3Data\";\nimport { applySelection } from \"./helpers/selection\";\nimport { parseV1, convertToV2 } from \"./helpers/v1tov2\";\nimport queryServer from \"./helpers/server\";\nimport goParentQueryButton from \"./Components/NavBar/GoBackToParentQueryButton\";\nimport passChooser from \"./Components/NavBar/PassChooser\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const defaultPage = \"input\";\n    this.state = {\n      selections: new Set(),\n      router: defaultPage,\n      allQueries: [],\n      currentQueryId: 0,\n      currentPassId: 0,\n      restartGraph: false,\n      lastInput: \"\"\n    };\n  }\n\n  passInput = async (mode, type, input) => {\n    let json;\n    if (mode === \"json\") {\n      json = JSON.parse(input).data;\n    } else if (mode === \"url\") {\n      json = await queryServer(input);\n    } else if (mode === \"v1\") {\n      const v1Structure = await parseV1(input, () => {});\n      json = convertToV2(v1Structure);\n    }\n\n    const selections = applySelection(json, type);\n    const data = parseJson(json, selections);\n\n    this.setState({\n      selections,\n      allQueries: data,\n      currentQueryId: data\n        .filter(query => query.pass === 0)\n        .find(query => query.parentId === null).id,\n      router: \"summary\",\n      json,\n      lastInput: input\n    });\n  };\n\n  changeGraph = childId => {\n    this.setState({ currentQueryId: childId, restartGraph: true });\n  };\n\n  changePass = passId => {\n    const { allQueries } = this.state;\n    const newQueryId = allQueries\n      .filter(query => query.pass === passId)\n      .find(query => query.parentId === null).id;\n    this.changeGraph(newQueryId);\n    this.setState({ currentPassId: passId });\n  };\n\n  renderSummary() {\n    if (!this.state.json) {\n      return <p>Load a query plan first!</p>;\n    }\n\n    const { currentQueryId, allQueries, json } = this.state;\n\n    return (\n      <Summary info={allQueries} queries={json} currentQuery={currentQueryId} />\n    );\n  }\n\n  renderGraph() {\n    if (!this.state.json) {\n      return <p>Load a query plan first!</p>;\n    }\n\n    const { currentQueryId, allQueries, selections } = this.state;\n    const query = this.state.json[currentQueryId];\n\n    return (\n      <Graph\n        className=\"my-0\"\n        selection={selections[currentQueryId]}\n        query={query}\n        details={allQueries[currentQueryId]}\n        restart={() => this.setState({ restartGraph: false })}\n        changeGraph={this.changeGraph}\n      />\n    );\n  }\n\n  renderTimeline() {\n    if (!this.state.json) {\n      return <p>Load a query plan first!</p>;\n    }\n\n    const { currentQueryId } = this.state;\n\n    return <Timeline plan={this.state.json[currentQueryId || 0]} />;\n  }\n\n  renderPassChooser() {\n    const { allQueries, currentPassId, router } = this.state;\n    if (router === \"graph\" || router === \"timeline\") {\n      return passChooser(allQueries, currentPassId, this.changePass);\n    }\n    return null;\n  }\n\n  render() {\n    const {\n      allQueries,\n      currentQueryId,\n      restartGraph,\n      router,\n      lastInput\n    } = this.state;\n    const { parentId: currentParentId = null } =\n      allQueries[currentQueryId] || {};\n\n    return (\n      <>\n        <NavBar\n          navigate={dir => this.setState({ router: dir })}\n          dataIsEmpty\n          goBackButton={goParentQueryButton(currentParentId, this.changeGraph)}\n          passChooser={this.renderPassChooser()}\n        />\n        <main role=\"main\" className=\"container-fluid px-0\">\n          {router === \"input\" && (\n            <Input passInput={this.passInput} lastInput={lastInput} />\n          )}\n          {router === \"summary\" && this.renderSummary()}\n          {router === \"graph\" && !restartGraph && this.renderGraph()}\n          {router === \"timeline\" && this.renderTimeline()}\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}